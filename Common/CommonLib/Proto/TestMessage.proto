syntax = "proto3";
package Crazy.Common;

////验证登陆消息
message C2S_TestMessage // IMessage
{
	int32 RpcId = 90;
	string Data = 1;
}
message S2C_AllocPlayerIdMessage // IMessage
{
	int32 RpcId = 90;
	string PlayerId = 1;
}
message Vector3
{
	float X = 1;
	float Y = 2;
	float Z = 3;

}
////玩家同步自身位置等信息
message SyncPlayerEntityBattleMessage // ISyncBattleMessage
{
	int32 RpcId = 90;
	int64 RoomId = 101;
	string PlayerId = 102;
	int64 EntityId = 103;
	int64 Time = 104;

	Vector3 Pos = 2;
	Vector3 Forward = 3;

	bool IsGround = 4;
	float VerticalSpeed = 5;
	float ForwardSpeed = 6;

	bool MeleeAttack = 7;
	bool InputDetected = 8;

	
	
}
message SyncChomperEntityPhysicStateBattleMessage // ISyncBattleMessage
{
	int32 RpcId = 90;
	int64 RoomId = 101;
	string PlayerId = 102;
	int64 EntityId = 103;
	int32 EnemyType =1;
	Vector3 Pos = 2;
	Vector3 Forward = 3;
}
message SyncChomperEntityAnimationStateBattleMessage // ISyncBattleMessage
{
	int32 RpcId = 90;
	int64 RoomId = 101;
	string PlayerId = 102;
	int64 EntityId = 103;
	bool AttackTrigger = 1;
	bool InPursuit = 2;
	bool IsGrounded = 3;
	bool NearBase = 4;
	bool SpottedTrigger = 5;
	float IdleState = 6;
}
message SyncEnemyEntityAnimationStateBattleMessage // ISyncBattleMessage
{
	int32 RpcId = 90;
	int64 RoomId = 101;
	string PlayerId = 102;
	int64 EntityId = 103;
	bool HitTrigger = 1;
	float VerticalHitDot = 2;
	float HorizontalHitDot = 3;
	bool ThrownTrigger = 4;
}
message SyncStartLevelBattleMessage // ISyncBattleMessage
{
	int32 RpcId = 90;
	int64 RoomId = 101;
	string PlayerId = 102;
	int64 EntityId = 103;
	int32 LevelId = 1;
}
message C2B_EnterClubBattleReqMessage // IRequest
{
	int32 RpcId = 90;
	int64 RoomId = 1;
	string PlayerId = 2;
}

message B2C_EnterClubBattleAckMessage // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 RoomId = 1;
}

message B2C_InitPlayerEntityBattleMessage // IMessage
{
	int32 RpcId = 90;
	string PlayerId = 1;

	Vector3 Pos = 2;
	Vector3 Forward = 3;

	bool IsGround = 4;
	float VerticalSpeed = 5;
	float ForwardSpeed = 6;

	bool MeleeAttack = 7;

	int64 RoomId = 8;

}
message B2C_MissingPlayerEntityBattleMessage // IMessage
{
	int32 RpcId = 90;
	int64 RoomId = 1;
	string PlayerId = 2;
}



message C2L_CreateRoomReqMessage // IRequest
{
	int32 RpcId = 90;
	string PlayerId = 1;
}
message L2C_CreateRoomAckMessage // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	
	string PlayerId = 1;
	int64 RoomId = 2;

}

message C2L_JoinRoomReqMessage // IRequest
{
	int32 RpcId = 90;
	
	string PlayerId = 1;
	int64 RoomId = 2;
}
message L2C_JoinRoomAckMessage // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	
	string PlayerId = 1;
	int64 RoomId = 2;
}
message C2L_GetRoomInfoReqMessage // IRequest
{
	int32 RpcId = 90;
	string PlayerId = 1;
	int64 RoomId = 2;
	
}
message L2C_GetRoomInfoAckMessage // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string PlayerId = 1;
	RoomInfoMessage RoomInfo = 2;
}
message C2L_GetRoomListInfoReqMessage // IRequest
{
	int32 RpcId = 90;
	
	string PlayerId = 1;
}
message L2C_GetRoomListInfoAckMessage // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	repeated RoomInfoMessage RoomInfos = 1;
}
message RoomInfoMessage
{
	int64 RoomId = 1;
	string Roomer = 2;
	string RoomName = 3;
	int32 RoomState = 4;
	int32 RoomCapacity = 5;
	repeated string PlayerIds = 6;
}

message C2G_AllocBattleServerMessageReq // IRequest
{
	int32 RpcId = 90;
	string PlayerId = 1;
	int64 RoomId = 2;
}
message C2G_AllocBattleServerMessageAck // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string PlayerId = 1;
}
