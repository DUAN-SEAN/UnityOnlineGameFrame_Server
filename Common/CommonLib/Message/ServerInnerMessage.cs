// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ServerInnerMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Crazy.Common {

  /// <summary>Holder for reflection information generated from ServerInnerMessage.proto</summary>
  public static partial class ServerInnerMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for ServerInnerMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerInnerMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhTZXJ2ZXJJbm5lck1lc3NhZ2UucHJvdG8SDENyYXp5LkNvbW1vbiI4ChVH",
            "MlNfVGVzdFNlcnZlck1lc3NhZ2USDQoFUnBjSWQYWiABKAUSEAoIU2VydmVy",
            "SWQYASABKAUiOQoWRzJTX0NhdGNoU2VydmVyTWVzc2FnZRINCgVScGNJZBha",
            "IAEoBRIQCghTZXJ2ZXJJZBgBIAEoBSJZChZTMkdfQ2F0Y2hTZXJ2ZXJNZXNz",
            "YWdlEg0KBVJwY0lkGFogASgFEg0KBUVycm9yGFsgASgFEg8KB01lc3NhZ2UY",
            "XCABKAkSEAoIU2VydmVySWQYASABKAUicgoYUzJHX1dhcnBwZWRTZXJ2ZXJN",
            "ZXNzYWdlEg0KBVJwY0lkGFogASgFEhAKCFNlcnZlcklkGAEgASgFEhAKCFBs",
            "YXllcklkGAIgASgJEhMKC01lc3NhZ2VCb2R5GAMgASgMEg4KBlR5cGVJZBgE",
            "IAEoDSJVCiJHMkxfR2V0Um9vbVBsYXllcnNTZXJ2ZXJNZXNzYWdlUmVxEg0K",
            "BVJwY0lkGFogASgFEhAKCFNlcnZlcklkGAEgASgFEg4KBlJvb21JZBgCIAEo",
            "AyKKAQoiTDJHX0dldFJvb21QbGF5ZXJzU2VydmVyTWVzc2FnZUFDSxINCgVS",
            "cGNJZBhaIAEoBRINCgVFcnJvchhbIAEoBRIPCgdNZXNzYWdlGFwgASgJEhAK",
            "CFNlcnZlcklkGAEgASgFEhEKCVBsYXllcklkcxgCIAMoCRIQCghSb29tZXJJ",
            "ZBgDIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.G2S_TestServerMessage), global::Crazy.Common.G2S_TestServerMessage.Parser, new[]{ "RpcId", "ServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.G2S_CatchServerMessage), global::Crazy.Common.G2S_CatchServerMessage.Parser, new[]{ "RpcId", "ServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2G_CatchServerMessage), global::Crazy.Common.S2G_CatchServerMessage.Parser, new[]{ "RpcId", "Error", "Message", "ServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2G_WarppedServerMessage), global::Crazy.Common.S2G_WarppedServerMessage.Parser, new[]{ "RpcId", "ServerId", "PlayerId", "MessageBody", "TypeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.G2L_GetRoomPlayersServerMessageReq), global::Crazy.Common.G2L_GetRoomPlayersServerMessageReq.Parser, new[]{ "RpcId", "ServerId", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.L2G_GetRoomPlayersServerMessageACK), global::Crazy.Common.L2G_GetRoomPlayersServerMessageACK.Parser, new[]{ "RpcId", "Error", "Message", "ServerId", "PlayerIds", "RoomerId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class G2S_TestServerMessage : pb::IMessage<G2S_TestServerMessage> {
    private static readonly pb::MessageParser<G2S_TestServerMessage> _parser = new pb::MessageParser<G2S_TestServerMessage>(() => new G2S_TestServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2S_TestServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.ServerInnerMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_TestServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_TestServerMessage(G2S_TestServerMessage other) : this() {
      rpcId_ = other.rpcId_;
      serverId_ = other.serverId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_TestServerMessage Clone() {
      return new G2S_TestServerMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2S_TestServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2S_TestServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (ServerId != other.ServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2S_TestServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///抓住内部一个Server
  /// </summary>
  public sealed partial class G2S_CatchServerMessage : pb::IMessage<G2S_CatchServerMessage> {
    private static readonly pb::MessageParser<G2S_CatchServerMessage> _parser = new pb::MessageParser<G2S_CatchServerMessage>(() => new G2S_CatchServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2S_CatchServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.ServerInnerMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_CatchServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_CatchServerMessage(G2S_CatchServerMessage other) : this() {
      rpcId_ = other.rpcId_;
      serverId_ = other.serverId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2S_CatchServerMessage Clone() {
      return new G2S_CatchServerMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2S_CatchServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2S_CatchServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (ServerId != other.ServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2S_CatchServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2G_CatchServerMessage : pb::IMessage<S2G_CatchServerMessage> {
    private static readonly pb::MessageParser<S2G_CatchServerMessage> _parser = new pb::MessageParser<S2G_CatchServerMessage>(() => new S2G_CatchServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2G_CatchServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.ServerInnerMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_CatchServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_CatchServerMessage(S2G_CatchServerMessage other) : this() {
      rpcId_ = other.rpcId_;
      error_ = other.error_;
      message_ = other.message_;
      serverId_ = other.serverId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_CatchServerMessage Clone() {
      return new S2G_CatchServerMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 91;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 92;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2G_CatchServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2G_CatchServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (ServerId != other.ServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2G_CatchServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2G_WarppedServerMessage : pb::IMessage<S2G_WarppedServerMessage> {
    private static readonly pb::MessageParser<S2G_WarppedServerMessage> _parser = new pb::MessageParser<S2G_WarppedServerMessage>(() => new S2G_WarppedServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2G_WarppedServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.ServerInnerMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_WarppedServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_WarppedServerMessage(S2G_WarppedServerMessage other) : this() {
      rpcId_ = other.rpcId_;
      serverId_ = other.serverId_;
      playerId_ = other.playerId_;
      messageBody_ = other.messageBody_;
      typeId_ = other.typeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2G_WarppedServerMessage Clone() {
      return new S2G_WarppedServerMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MessageBody" field.</summary>
    public const int MessageBodyFieldNumber = 3;
    private pb::ByteString messageBody_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageBody {
      get { return messageBody_; }
      set {
        messageBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TypeId" field.</summary>
    public const int TypeIdFieldNumber = 4;
    private uint typeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2G_WarppedServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2G_WarppedServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (ServerId != other.ServerId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (MessageBody != other.MessageBody) return false;
      if (TypeId != other.TypeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (MessageBody.Length != 0) hash ^= MessageBody.GetHashCode();
      if (TypeId != 0) hash ^= TypeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (MessageBody.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageBody);
      }
      if (TypeId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TypeId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (MessageBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageBody);
      }
      if (TypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TypeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2G_WarppedServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.MessageBody.Length != 0) {
        MessageBody = other.MessageBody;
      }
      if (other.TypeId != 0) {
        TypeId = other.TypeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            MessageBody = input.ReadBytes();
            break;
          }
          case 32: {
            TypeId = input.ReadUInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///抓住内部一个Server
  /// </summary>
  public sealed partial class G2L_GetRoomPlayersServerMessageReq : pb::IMessage<G2L_GetRoomPlayersServerMessageReq> {
    private static readonly pb::MessageParser<G2L_GetRoomPlayersServerMessageReq> _parser = new pb::MessageParser<G2L_GetRoomPlayersServerMessageReq>(() => new G2L_GetRoomPlayersServerMessageReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_GetRoomPlayersServerMessageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.ServerInnerMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetRoomPlayersServerMessageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetRoomPlayersServerMessageReq(G2L_GetRoomPlayersServerMessageReq other) : this() {
      rpcId_ = other.rpcId_;
      serverId_ = other.serverId_;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetRoomPlayersServerMessageReq Clone() {
      return new G2L_GetRoomPlayersServerMessageReq(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "RoomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_GetRoomPlayersServerMessageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_GetRoomPlayersServerMessageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (ServerId != other.ServerId) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (RoomId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_GetRoomPlayersServerMessageReq other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 16: {
            RoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class L2G_GetRoomPlayersServerMessageACK : pb::IMessage<L2G_GetRoomPlayersServerMessageACK> {
    private static readonly pb::MessageParser<L2G_GetRoomPlayersServerMessageACK> _parser = new pb::MessageParser<L2G_GetRoomPlayersServerMessageACK>(() => new L2G_GetRoomPlayersServerMessageACK());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_GetRoomPlayersServerMessageACK> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.ServerInnerMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetRoomPlayersServerMessageACK() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetRoomPlayersServerMessageACK(L2G_GetRoomPlayersServerMessageACK other) : this() {
      rpcId_ = other.rpcId_;
      error_ = other.error_;
      message_ = other.message_;
      serverId_ = other.serverId_;
      playerIds_ = other.playerIds_.Clone();
      roomerId_ = other.roomerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetRoomPlayersServerMessageACK Clone() {
      return new L2G_GetRoomPlayersServerMessageACK(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 91;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 92;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_playerIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> playerIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayerIds {
      get { return playerIds_; }
    }

    /// <summary>Field number for the "RoomerId" field.</summary>
    public const int RoomerIdFieldNumber = 3;
    private string roomerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomerId {
      get { return roomerId_; }
      set {
        roomerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_GetRoomPlayersServerMessageACK);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_GetRoomPlayersServerMessageACK other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (ServerId != other.ServerId) return false;
      if(!playerIds_.Equals(other.playerIds_)) return false;
      if (RoomerId != other.RoomerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      hash ^= playerIds_.GetHashCode();
      if (RoomerId.Length != 0) hash ^= RoomerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (RoomerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (RoomerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_GetRoomPlayersServerMessageACK other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      playerIds_.Add(other.playerIds_);
      if (other.RoomerId.Length != 0) {
        RoomerId = other.RoomerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 18: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
          case 26: {
            RoomerId = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
