// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RpcMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Crazy.Common {

  /// <summary>Holder for reflection information generated from RpcMessage.proto</summary>
  public static partial class RpcMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for RpcMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBScGNNZXNzYWdlLnByb3RvEgxDcmF6eS5Db21tb24iRAoQQzJTX0xvZ2lu",
            "TWVzc2FnZRINCgVScGNJZBhaIAEoBRIPCgdhY2NvdW50GAEgASgJEhAKCHBh",
            "c3N3b3JkGAIgASgJIqcBChBTMkNfTG9naW5NZXNzYWdlEg0KBVJwY0lkGFog",
            "ASgFEg0KBUVycm9yGFsgASgFEg8KB01lc3NhZ2UYXCABKAkSFAoMcGxheWVy",
            "R2FtZUlkGAEgASgJEjMKBXN0YXRlGAIgASgOMiQuQ3JhenkuQ29tbW9uLlMy",
            "Q19Mb2dpbk1lc3NhZ2UuU3RhdGUiGQoFU3RhdGUSCAoERmFpbBAAEgYKAk9L",
            "EAEiRwoTQzJTX1JlZ2lzdGVyTWVzc2FnZRINCgVScGNJZBhaIAEoBRIPCgdh",
            "Y2NvdW50GAEgASgJEhAKCHBhc3N3b3JkGAIgASgJIpcBChNTMkNfUmVnaXN0",
            "ZXJNZXNzYWdlEg0KBVJwY0lkGFogASgFEg0KBUVycm9yGFsgASgFEg8KB01l",
            "c3NhZ2UYXCABKAkSNgoFc3RhdGUYAiABKA4yJy5DcmF6eS5Db21tb24uUzJD",
            "X1JlZ2lzdGVyTWVzc2FnZS5TdGF0ZSIZCgVTdGF0ZRIICgRGYWlsEAASBgoC",
            "T0sQASJDChpDMlNfVXBkYXRlT25saW5lUGxheWVyTGlzdBINCgVScGNJZBha",
            "IAEoBRIWCg5MYXVuY2hQbGF5ZXJJZBgBIAEoCSLSAQoaUzJDX1VwZGF0ZU9u",
            "bGluZVBsYXllckxpc3QSDQoFUnBjSWQYWiABKAUSDQoFRXJyb3IYWyABKAUS",
            "DwoHTWVzc2FnZRhcIAEoCRJQCg1PbmxpbmVQbGF5ZXJzGAEgAygLMjkuQ3Jh",
            "enkuQ29tbW9uLlMyQ19VcGRhdGVPbmxpbmVQbGF5ZXJMaXN0Lk9ubGluZVBs",
            "YXllckluZm8aMwoQT25saW5lUGxheWVySW5mbxIQCghQbGF5ZXJJZBgBIAEo",
            "CRINCgVTdGF0ZRgCIAEoBSIyCg9DMlNfU2hpcEluZm9SZXESDQoFUnBjSWQY",
            "WiABKAUSEAoIUGxheWVySWQYASABKAkilgEKD1MyQ19TaGlwSW5mb0FjaxIN",
            "CgVScGNJZBhaIAEoBRINCgVFcnJvchhbIAEoBRIPCgdNZXNzYWdlGFwgASgJ",
            "Eg4KBlNoaXBJZBgBIAEoBRIQCghTaGlwVHlwZRgCIAEoBRIQCghTaGlwTmFt",
            "ZRgDIAEoCRIPCgdXZWFwb25BGAQgASgFEg8KB1dlYXBvbkIYBSABKAUijgEK",
            "FUMyU19VcExvYWRTaGlwSW5mb1JlcRINCgVScGNJZBhaIAEoBRIQCghQbGF5",
            "ZXJJZBgBIAEoCRIOCgZTaGlwSWQYAiABKAUSEAoIU2hpcFR5cGUYAyABKAUS",
            "EAoIU2hpcE5hbWUYBCABKAkSDwoHV2VhcG9uQRgFIAEoBRIPCgdXZWFwb25C",
            "GAYgASgFIq0BChVTMkNfVXBMb2FkU2hpcEluZm9BY2sSDQoFUnBjSWQYWiAB",
            "KAUSDQoFRXJyb3IYWyABKAUSDwoHTWVzc2FnZRhcIAEoCRIQCghQbGF5ZXJJ",
            "ZBgBIAEoCRI4CgVzdGF0ZRgCIAEoDjIpLkNyYXp5LkNvbW1vbi5TMkNfVXBM",
            "b2FkU2hpcEluZm9BY2suU3RhdGUiGQoFU3RhdGUSCAoERmFpbBAAEgYKAk9L",
            "EAEiHQoMQzJTX0RlbGF5UmVxEg0KBVJwY0lkGFogASgFIksKDFMyQ19EZWxh",
            "eUFjaxINCgVScGNJZBhaIAEoBRINCgVFcnJvchhbIAEoBRIPCgdNZXNzYWdl",
            "GFwgASgJEgwKBFRpbWUYASABKANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_LoginMessage), global::Crazy.Common.C2S_LoginMessage.Parser, new[]{ "RpcId", "Account", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_LoginMessage), global::Crazy.Common.S2C_LoginMessage.Parser, new[]{ "RpcId", "Error", "Message", "PlayerGameId", "State" }, null, new[]{ typeof(global::Crazy.Common.S2C_LoginMessage.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_RegisterMessage), global::Crazy.Common.C2S_RegisterMessage.Parser, new[]{ "RpcId", "Account", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_RegisterMessage), global::Crazy.Common.S2C_RegisterMessage.Parser, new[]{ "RpcId", "Error", "Message", "State" }, null, new[]{ typeof(global::Crazy.Common.S2C_RegisterMessage.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_UpdateOnlinePlayerList), global::Crazy.Common.C2S_UpdateOnlinePlayerList.Parser, new[]{ "RpcId", "LaunchPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_UpdateOnlinePlayerList), global::Crazy.Common.S2C_UpdateOnlinePlayerList.Parser, new[]{ "RpcId", "Error", "Message", "OnlinePlayers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_UpdateOnlinePlayerList.Types.OnlinePlayerInfo), global::Crazy.Common.S2C_UpdateOnlinePlayerList.Types.OnlinePlayerInfo.Parser, new[]{ "PlayerId", "State" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_ShipInfoReq), global::Crazy.Common.C2S_ShipInfoReq.Parser, new[]{ "RpcId", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_ShipInfoAck), global::Crazy.Common.S2C_ShipInfoAck.Parser, new[]{ "RpcId", "Error", "Message", "ShipId", "ShipType", "ShipName", "WeaponA", "WeaponB" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_UpLoadShipInfoReq), global::Crazy.Common.C2S_UpLoadShipInfoReq.Parser, new[]{ "RpcId", "PlayerId", "ShipId", "ShipType", "ShipName", "WeaponA", "WeaponB" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_UpLoadShipInfoAck), global::Crazy.Common.S2C_UpLoadShipInfoAck.Parser, new[]{ "RpcId", "Error", "Message", "PlayerId", "State" }, null, new[]{ typeof(global::Crazy.Common.S2C_UpLoadShipInfoAck.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_DelayReq), global::Crazy.Common.C2S_DelayReq.Parser, new[]{ "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_DelayAck), global::Crazy.Common.S2C_DelayAck.Parser, new[]{ "RpcId", "Error", "Message", "Time" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /////验证登陆消息
  /// </summary>
  public sealed partial class C2S_LoginMessage : pb::IMessage<C2S_LoginMessage> {
    private static readonly pb::MessageParser<C2S_LoginMessage> _parser = new pb::MessageParser<C2S_LoginMessage>(() => new C2S_LoginMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_LoginMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginMessage(C2S_LoginMessage other) : this() {
      rpcId_ = other.rpcId_;
      account_ = other.account_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginMessage Clone() {
      return new C2S_LoginMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_LoginMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_LoginMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_LoginMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_LoginMessage : pb::IMessage<S2C_LoginMessage> {
    private static readonly pb::MessageParser<S2C_LoginMessage> _parser = new pb::MessageParser<S2C_LoginMessage>(() => new S2C_LoginMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LoginMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginMessage(S2C_LoginMessage other) : this() {
      rpcId_ = other.rpcId_;
      error_ = other.error_;
      message_ = other.message_;
      playerGameId_ = other.playerGameId_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginMessage Clone() {
      return new S2C_LoginMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 91;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 92;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerGameId" field.</summary>
    public const int PlayerGameIdFieldNumber = 1;
    private string playerGameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerGameId {
      get { return playerGameId_; }
      set {
        playerGameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Crazy.Common.S2C_LoginMessage.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Crazy.Common.S2C_LoginMessage.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LoginMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LoginMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (PlayerGameId != other.PlayerGameId) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (PlayerGameId.Length != 0) hash ^= PlayerGameId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerGameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerGameId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerGameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerGameId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LoginMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.PlayerGameId.Length != 0) {
        PlayerGameId = other.PlayerGameId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerGameId = input.ReadString();
            break;
          }
          case 16: {
            State = (global::Crazy.Common.S2C_LoginMessage.Types.State) input.ReadEnum();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2C_LoginMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("Fail")] Fail = 0,
        [pbr::OriginalName("OK")] Ok = 1,
      }

    }
    #endregion

  }

  public sealed partial class C2S_RegisterMessage : pb::IMessage<C2S_RegisterMessage> {
    private static readonly pb::MessageParser<C2S_RegisterMessage> _parser = new pb::MessageParser<C2S_RegisterMessage>(() => new C2S_RegisterMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RegisterMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RegisterMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RegisterMessage(C2S_RegisterMessage other) : this() {
      rpcId_ = other.rpcId_;
      account_ = other.account_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RegisterMessage Clone() {
      return new C2S_RegisterMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RegisterMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RegisterMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RegisterMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RegisterMessage : pb::IMessage<S2C_RegisterMessage> {
    private static readonly pb::MessageParser<S2C_RegisterMessage> _parser = new pb::MessageParser<S2C_RegisterMessage>(() => new S2C_RegisterMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RegisterMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RegisterMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RegisterMessage(S2C_RegisterMessage other) : this() {
      rpcId_ = other.rpcId_;
      error_ = other.error_;
      message_ = other.message_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RegisterMessage Clone() {
      return new S2C_RegisterMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 91;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 92;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Crazy.Common.S2C_RegisterMessage.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Crazy.Common.S2C_RegisterMessage.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RegisterMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RegisterMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RegisterMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            State = (global::Crazy.Common.S2C_RegisterMessage.Types.State) input.ReadEnum();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2C_RegisterMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("Fail")] Fail = 0,
        [pbr::OriginalName("OK")] Ok = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///大厅
  /// </summary>
  public sealed partial class C2S_UpdateOnlinePlayerList : pb::IMessage<C2S_UpdateOnlinePlayerList> {
    private static readonly pb::MessageParser<C2S_UpdateOnlinePlayerList> _parser = new pb::MessageParser<C2S_UpdateOnlinePlayerList>(() => new C2S_UpdateOnlinePlayerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UpdateOnlinePlayerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateOnlinePlayerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateOnlinePlayerList(C2S_UpdateOnlinePlayerList other) : this() {
      rpcId_ = other.rpcId_;
      launchPlayerId_ = other.launchPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateOnlinePlayerList Clone() {
      return new C2S_UpdateOnlinePlayerList(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "LaunchPlayerId" field.</summary>
    public const int LaunchPlayerIdFieldNumber = 1;
    private string launchPlayerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaunchPlayerId {
      get { return launchPlayerId_; }
      set {
        launchPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UpdateOnlinePlayerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UpdateOnlinePlayerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (LaunchPlayerId != other.LaunchPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (LaunchPlayerId.Length != 0) hash ^= LaunchPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LaunchPlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LaunchPlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (LaunchPlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaunchPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UpdateOnlinePlayerList other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.LaunchPlayerId.Length != 0) {
        LaunchPlayerId = other.LaunchPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LaunchPlayerId = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_UpdateOnlinePlayerList : pb::IMessage<S2C_UpdateOnlinePlayerList> {
    private static readonly pb::MessageParser<S2C_UpdateOnlinePlayerList> _parser = new pb::MessageParser<S2C_UpdateOnlinePlayerList>(() => new S2C_UpdateOnlinePlayerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpdateOnlinePlayerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateOnlinePlayerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateOnlinePlayerList(S2C_UpdateOnlinePlayerList other) : this() {
      rpcId_ = other.rpcId_;
      error_ = other.error_;
      message_ = other.message_;
      onlinePlayers_ = other.onlinePlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateOnlinePlayerList Clone() {
      return new S2C_UpdateOnlinePlayerList(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 91;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 92;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OnlinePlayers" field.</summary>
    public const int OnlinePlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Crazy.Common.S2C_UpdateOnlinePlayerList.Types.OnlinePlayerInfo> _repeated_onlinePlayers_codec
        = pb::FieldCodec.ForMessage(10, global::Crazy.Common.S2C_UpdateOnlinePlayerList.Types.OnlinePlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Crazy.Common.S2C_UpdateOnlinePlayerList.Types.OnlinePlayerInfo> onlinePlayers_ = new pbc::RepeatedField<global::Crazy.Common.S2C_UpdateOnlinePlayerList.Types.OnlinePlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Crazy.Common.S2C_UpdateOnlinePlayerList.Types.OnlinePlayerInfo> OnlinePlayers {
      get { return onlinePlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpdateOnlinePlayerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpdateOnlinePlayerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if(!onlinePlayers_.Equals(other.onlinePlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= onlinePlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      onlinePlayers_.WriteTo(output, _repeated_onlinePlayers_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += onlinePlayers_.CalculateSize(_repeated_onlinePlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpdateOnlinePlayerList other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      onlinePlayers_.Add(other.onlinePlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            onlinePlayers_.AddEntriesFrom(input, _repeated_onlinePlayers_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2C_UpdateOnlinePlayerList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class OnlinePlayerInfo : pb::IMessage<OnlinePlayerInfo> {
        private static readonly pb::MessageParser<OnlinePlayerInfo> _parser = new pb::MessageParser<OnlinePlayerInfo>(() => new OnlinePlayerInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OnlinePlayerInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Crazy.Common.S2C_UpdateOnlinePlayerList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnlinePlayerInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnlinePlayerInfo(OnlinePlayerInfo other) : this() {
          playerId_ = other.playerId_;
          state_ = other.state_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OnlinePlayerInfo Clone() {
          return new OnlinePlayerInfo(this);
        }

        /// <summary>Field number for the "PlayerId" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private string playerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerId {
          get { return playerId_; }
          set {
            playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "State" field.</summary>
        public const int StateFieldNumber = 2;
        private int state_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OnlinePlayerInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OnlinePlayerInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (State != other.State) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
          if (State != 0) hash ^= State.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PlayerId);
          }
          if (State != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(State);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
          }
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OnlinePlayerInfo other) {
          if (other == null) {
            return;
          }
          if (other.PlayerId.Length != 0) {
            PlayerId = other.PlayerId;
          }
          if (other.State != 0) {
            State = other.State;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PlayerId = input.ReadString();
                break;
              }
              case 16: {
                State = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///获取飞船列表
  /// </summary>
  public sealed partial class C2S_ShipInfoReq : pb::IMessage<C2S_ShipInfoReq> {
    private static readonly pb::MessageParser<C2S_ShipInfoReq> _parser = new pb::MessageParser<C2S_ShipInfoReq>(() => new C2S_ShipInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ShipInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShipInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShipInfoReq(C2S_ShipInfoReq other) : this() {
      rpcId_ = other.rpcId_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShipInfoReq Clone() {
      return new C2S_ShipInfoReq(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ShipInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ShipInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ShipInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取飞船列表
  /// </summary>
  public sealed partial class S2C_ShipInfoAck : pb::IMessage<S2C_ShipInfoAck> {
    private static readonly pb::MessageParser<S2C_ShipInfoAck> _parser = new pb::MessageParser<S2C_ShipInfoAck>(() => new S2C_ShipInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ShipInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShipInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShipInfoAck(S2C_ShipInfoAck other) : this() {
      rpcId_ = other.rpcId_;
      error_ = other.error_;
      message_ = other.message_;
      shipId_ = other.shipId_;
      shipType_ = other.shipType_;
      shipName_ = other.shipName_;
      weaponA_ = other.weaponA_;
      weaponB_ = other.weaponB_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShipInfoAck Clone() {
      return new S2C_ShipInfoAck(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 91;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 92;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShipId" field.</summary>
    public const int ShipIdFieldNumber = 1;
    private int shipId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShipId {
      get { return shipId_; }
      set {
        shipId_ = value;
      }
    }

    /// <summary>Field number for the "ShipType" field.</summary>
    public const int ShipTypeFieldNumber = 2;
    private int shipType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShipType {
      get { return shipType_; }
      set {
        shipType_ = value;
      }
    }

    /// <summary>Field number for the "ShipName" field.</summary>
    public const int ShipNameFieldNumber = 3;
    private string shipName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShipName {
      get { return shipName_; }
      set {
        shipName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponA" field.</summary>
    public const int WeaponAFieldNumber = 4;
    private int weaponA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponA {
      get { return weaponA_; }
      set {
        weaponA_ = value;
      }
    }

    /// <summary>Field number for the "WeaponB" field.</summary>
    public const int WeaponBFieldNumber = 5;
    private int weaponB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponB {
      get { return weaponB_; }
      set {
        weaponB_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ShipInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ShipInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (ShipId != other.ShipId) return false;
      if (ShipType != other.ShipType) return false;
      if (ShipName != other.ShipName) return false;
      if (WeaponA != other.WeaponA) return false;
      if (WeaponB != other.WeaponB) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (ShipId != 0) hash ^= ShipId.GetHashCode();
      if (ShipType != 0) hash ^= ShipType.GetHashCode();
      if (ShipName.Length != 0) hash ^= ShipName.GetHashCode();
      if (WeaponA != 0) hash ^= WeaponA.GetHashCode();
      if (WeaponB != 0) hash ^= WeaponB.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShipId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShipId);
      }
      if (ShipType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShipType);
      }
      if (ShipName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShipName);
      }
      if (WeaponA != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeaponA);
      }
      if (WeaponB != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WeaponB);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ShipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShipId);
      }
      if (ShipType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShipType);
      }
      if (ShipName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShipName);
      }
      if (WeaponA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponA);
      }
      if (WeaponB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponB);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ShipInfoAck other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.ShipId != 0) {
        ShipId = other.ShipId;
      }
      if (other.ShipType != 0) {
        ShipType = other.ShipType;
      }
      if (other.ShipName.Length != 0) {
        ShipName = other.ShipName;
      }
      if (other.WeaponA != 0) {
        WeaponA = other.WeaponA;
      }
      if (other.WeaponB != 0) {
        WeaponB = other.WeaponB;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShipId = input.ReadInt32();
            break;
          }
          case 16: {
            ShipType = input.ReadInt32();
            break;
          }
          case 26: {
            ShipName = input.ReadString();
            break;
          }
          case 32: {
            WeaponA = input.ReadInt32();
            break;
          }
          case 40: {
            WeaponB = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上传飞船配置请求
  /// </summary>
  public sealed partial class C2S_UpLoadShipInfoReq : pb::IMessage<C2S_UpLoadShipInfoReq> {
    private static readonly pb::MessageParser<C2S_UpLoadShipInfoReq> _parser = new pb::MessageParser<C2S_UpLoadShipInfoReq>(() => new C2S_UpLoadShipInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UpLoadShipInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpLoadShipInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpLoadShipInfoReq(C2S_UpLoadShipInfoReq other) : this() {
      rpcId_ = other.rpcId_;
      playerId_ = other.playerId_;
      shipId_ = other.shipId_;
      shipType_ = other.shipType_;
      shipName_ = other.shipName_;
      weaponA_ = other.weaponA_;
      weaponB_ = other.weaponB_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpLoadShipInfoReq Clone() {
      return new C2S_UpLoadShipInfoReq(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShipId" field.</summary>
    public const int ShipIdFieldNumber = 2;
    private int shipId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShipId {
      get { return shipId_; }
      set {
        shipId_ = value;
      }
    }

    /// <summary>Field number for the "ShipType" field.</summary>
    public const int ShipTypeFieldNumber = 3;
    private int shipType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShipType {
      get { return shipType_; }
      set {
        shipType_ = value;
      }
    }

    /// <summary>Field number for the "ShipName" field.</summary>
    public const int ShipNameFieldNumber = 4;
    private string shipName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShipName {
      get { return shipName_; }
      set {
        shipName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponA" field.</summary>
    public const int WeaponAFieldNumber = 5;
    private int weaponA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponA {
      get { return weaponA_; }
      set {
        weaponA_ = value;
      }
    }

    /// <summary>Field number for the "WeaponB" field.</summary>
    public const int WeaponBFieldNumber = 6;
    private int weaponB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponB {
      get { return weaponB_; }
      set {
        weaponB_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UpLoadShipInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UpLoadShipInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (ShipId != other.ShipId) return false;
      if (ShipType != other.ShipType) return false;
      if (ShipName != other.ShipName) return false;
      if (WeaponA != other.WeaponA) return false;
      if (WeaponB != other.WeaponB) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (ShipId != 0) hash ^= ShipId.GetHashCode();
      if (ShipType != 0) hash ^= ShipType.GetHashCode();
      if (ShipName.Length != 0) hash ^= ShipName.GetHashCode();
      if (WeaponA != 0) hash ^= WeaponA.GetHashCode();
      if (WeaponB != 0) hash ^= WeaponB.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (ShipId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShipId);
      }
      if (ShipType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShipType);
      }
      if (ShipName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShipName);
      }
      if (WeaponA != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WeaponA);
      }
      if (WeaponB != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WeaponB);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (ShipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShipId);
      }
      if (ShipType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShipType);
      }
      if (ShipName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShipName);
      }
      if (WeaponA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponA);
      }
      if (WeaponB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponB);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UpLoadShipInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ShipId != 0) {
        ShipId = other.ShipId;
      }
      if (other.ShipType != 0) {
        ShipType = other.ShipType;
      }
      if (other.ShipName.Length != 0) {
        ShipName = other.ShipName;
      }
      if (other.WeaponA != 0) {
        WeaponA = other.WeaponA;
      }
      if (other.WeaponB != 0) {
        WeaponB = other.WeaponB;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            ShipId = input.ReadInt32();
            break;
          }
          case 24: {
            ShipType = input.ReadInt32();
            break;
          }
          case 34: {
            ShipName = input.ReadString();
            break;
          }
          case 40: {
            WeaponA = input.ReadInt32();
            break;
          }
          case 48: {
            WeaponB = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上传飞船配置响应
  /// </summary>
  public sealed partial class S2C_UpLoadShipInfoAck : pb::IMessage<S2C_UpLoadShipInfoAck> {
    private static readonly pb::MessageParser<S2C_UpLoadShipInfoAck> _parser = new pb::MessageParser<S2C_UpLoadShipInfoAck>(() => new S2C_UpLoadShipInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpLoadShipInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpLoadShipInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpLoadShipInfoAck(S2C_UpLoadShipInfoAck other) : this() {
      rpcId_ = other.rpcId_;
      error_ = other.error_;
      message_ = other.message_;
      playerId_ = other.playerId_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpLoadShipInfoAck Clone() {
      return new S2C_UpLoadShipInfoAck(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 91;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 92;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Crazy.Common.S2C_UpLoadShipInfoAck.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Crazy.Common.S2C_UpLoadShipInfoAck.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpLoadShipInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpLoadShipInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (PlayerId != other.PlayerId) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpLoadShipInfoAck other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            State = (global::Crazy.Common.S2C_UpLoadShipInfoAck.Types.State) input.ReadEnum();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2C_UpLoadShipInfoAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("Fail")] Fail = 0,
        [pbr::OriginalName("OK")] Ok = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///获取飞船列表
  /// </summary>
  public sealed partial class C2S_DelayReq : pb::IMessage<C2S_DelayReq> {
    private static readonly pb::MessageParser<C2S_DelayReq> _parser = new pb::MessageParser<C2S_DelayReq>(() => new C2S_DelayReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_DelayReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DelayReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DelayReq(C2S_DelayReq other) : this() {
      rpcId_ = other.rpcId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DelayReq Clone() {
      return new C2S_DelayReq(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_DelayReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_DelayReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_DelayReq other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取飞船列表
  /// </summary>
  public sealed partial class S2C_DelayAck : pb::IMessage<S2C_DelayAck> {
    private static readonly pb::MessageParser<S2C_DelayAck> _parser = new pb::MessageParser<S2C_DelayAck>(() => new S2C_DelayAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_DelayAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.RpcMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DelayAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DelayAck(S2C_DelayAck other) : this() {
      rpcId_ = other.rpcId_;
      error_ = other.error_;
      message_ = other.message_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DelayAck Clone() {
      return new S2C_DelayAck(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 91;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 92;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_DelayAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_DelayAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_DelayAck other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
